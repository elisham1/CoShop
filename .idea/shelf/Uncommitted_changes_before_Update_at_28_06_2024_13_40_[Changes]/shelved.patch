Index: .idea/render.experimental.xml
===================================================================
diff --git a/.idea/render.experimental.xml b/.idea/render.experimental.xml
deleted file mode 100644
--- a/.idea/render.experimental.xml	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ /dev/null	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RenderSettings">
-    <option name="showDecorations" value="true" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ /dev/null	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"jbr-17\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ b/.idea/gradle.xml	(date 1719571098762)
@@ -1,12 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="GRADLE" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="jbr-17" />
+        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: app/src/main/res/layout/activity_filter.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\"\r\n    tools:context=\".FilterActivity\">\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:gravity=\"center_vertical\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/filters_title\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_centerInParent=\"true\"\r\n            android:text=\"Additional filters\"\r\n            android:textSize=\"18sp\"\r\n            android:textStyle=\"bold\"/>\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/close_button\"\r\n            android:layout_width=\"48dp\"\r\n            android:layout_height=\"48dp\"\r\n            android:layout_alignParentEnd=\"true\"\r\n            android:layout_gravity=\"center_vertical\"\r\n            android:background=\"?android:attr/selectableItemBackground\"\r\n            android:contentDescription=\"Close\"\r\n            android:src=\"@android:drawable/ic_menu_close_clear_cancel\"\r\n            android:padding=\"10dp\"/>\r\n    </RelativeLayout>\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/search_row\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:layout_marginTop=\"16dp\"\r\n        android:layout_marginLeft=\"16dp\"\r\n        android:layout_marginRight=\"16dp\"\r\n        android:layout_marginBottom=\"0dp\"\r\n        android:clickable=\"true\"\r\n        android:focusable=\"true\"\r\n        android:background=\"?android:attr/selectableItemBackground\"\r\n        android:padding=\"8dp\">\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/edit_address_button\"\r\n            android:layout_width=\"48dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:background=\"?android:attr/selectableItemBackground\"\r\n            android:contentDescription=\"Edit address\"\r\n            android:src=\"@drawable/edit\"\r\n            android:padding=\"10dp\"\r\n            android:visibility=\"gone\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/search_address_text\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"38dp\"\r\n            android:layout_gravity=\"end\"\r\n            android:layout_weight=\"1\"\r\n            android:gravity=\"center_vertical|end\"\r\n            android:hint=\"Search address\"\r\n            android:paddingStart=\"12dp\"\r\n            android:textSize=\"15sp\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/search_address_button\"\r\n            android:layout_width=\"48dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:background=\"?android:attr/selectableItemBackground\"\r\n            android:contentDescription=\"Search address\"\r\n            android:src=\"@drawable/baseline_search_24\"\r\n            android:paddingTop=\"8dp\"\r\n            android:paddingBottom=\"8dp\"\r\n            android:paddingLeft=\"0dp\"\r\n            android:paddingRight=\"0dp\"\r\n            android:scaleType=\"fitStart\"\r\n            android:layout_gravity=\"center_vertical|start\"\r\n            android:adjustViewBounds=\"true\"\r\n            android:focusable=\"false\"\r\n            android:clickable=\"false\" />\r\n\r\n\r\n\r\n\r\n    </LinearLayout>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextText2\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"16dp\"\r\n        android:layout_marginRight=\"16dp\"\r\n        android:layout_marginTop=\"5dp\"\r\n        android:layout_marginBottom=\"10dp\"\r\n        android:ems=\"10\"\r\n        android:hint=\"Enter URL\"\r\n        android:inputType=\"text\"\r\n        android:minHeight=\"48dp\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/time\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:ems=\"10\"\r\n        android:inputType=\"text\"\r\n        android:drawableRight=\"@drawable/ic_baseline_access_time_24\"\r\n        android:hint=\"Choose a time that orders close by this time period\"\r\n        android:textSize=\"15sp\"\r\n        android:layout_marginTop=\"8dp\"\r\n        android:layout_marginStart=\"16dp\"\r\n        android:layout_marginEnd=\"16dp\"\r\n        android:minHeight=\"48dp\"\r\n        android:padding=\"12dp\"\r\n        android:onClick=\"showTimePickerDialog\"/>\r\n\r\n    <ListView\r\n        android:id=\"@+id/category_list\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_weight=\"1\"\r\n        android:choiceMode=\"multipleChoice\"\r\n        android:listSelector=\"@android:color/transparent\"\r\n        android:fadingEdge=\"vertical\"\r\n        android:fadingEdgeLength=\"50dp\"\r\n        android:scrollbars=\"vertical\"\r\n        android:requiresFadingEdge=\"vertical\" />\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:gravity=\"center_vertical\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <CheckBox\r\n            android:id=\"@+id/checkBoxSupplied\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:minHeight=\"48dp\"\r\n            android:text=\"Supplied orders\"\r\n            android:layout_margin=\"16dp\" />\r\n\r\n\r\n        <Space\r\n            android:layout_width=\"56dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\" />\r\n\r\n        <CheckBox\r\n            android:id=\"@+id/checkBoxConsumer\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:minHeight=\"48dp\"\r\n            android:text=\"Consumer orders\"\r\n            android:layout_margin=\"16dp\"/>\r\n\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:gravity=\"center_vertical\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <CheckBox\r\n            android:id=\"@+id/checkBoxLimit\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Set People Limit\"\r\n            android:layout_margin=\"16dp\"/>\r\n\r\n        <Space\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\" />\r\n\r\n        <CheckBox\r\n            android:id=\"@+id/checkBoxUnlimited\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Unlimited People\"\r\n            android:layout_margin=\"16dp\"/>\r\n\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:gravity=\"center_vertical\"\r\n        android:layout_margin=\"16dp\">\r\n\r\n        <com.google.android.material.slider.RangeSlider\r\n            android:id=\"@+id/rangeSliderPeople\"\r\n            android:layout_width=\"117dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:contentDescription=\"Max people range slider\"\r\n            android:valueFrom=\"2\"\r\n            android:valueTo=\"1000\"\r\n            app:labelVisibilityMode=\"labeled\"\r\n            app:thumbRadius=\"12dp\"\r\n            app:thumbStrokeWidth=\"2dp\"\r\n            app:trackHeight=\"4dp\"\r\n            android:enabled=\"false\"\r\n            />\r\n\r\n        <EditText\r\n            android:id=\"@+id/unlimit_value\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"0.5\"\r\n            android:text=\"1000\"\r\n            android:inputType=\"number\"\r\n            android:minHeight=\"48dp\"\r\n            android:padding=\"10dp\"\r\n            android:gravity=\"center\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:background=\"?android:attr/editTextBackground\"\r\n            android:enabled=\"false\"\r\n            />\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:gravity=\"center_vertical\"\r\n        android:layout_margin=\"16dp\">\r\n\r\n        <Button\r\n            android:id=\"@+id/reset_id\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:onClick=\"resetFilters\"\r\n            android:text=\"Reset\" />\r\n\r\n        <Space\r\n            android:layout_width=\"5dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/ok_id\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:onClick=\"OrderFiltering\"\r\n            android:text=\"Ok\" />\r\n    </LinearLayout>\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_filter.xml b/app/src/main/res/layout/activity_filter.xml
--- a/app/src/main/res/layout/activity_filter.xml	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ b/app/src/main/res/layout/activity_filter.xml	(date 1719508094000)
@@ -85,40 +85,80 @@
             android:adjustViewBounds="true"
             android:focusable="false"
             android:clickable="false" />
-
-
-
-
     </LinearLayout>
 
-    <EditText
-        android:id="@+id/editTextText2"
+    <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginLeft="16dp"
         android:layout_marginRight="16dp"
         android:layout_marginTop="5dp"
         android:layout_marginBottom="10dp"
-        android:ems="10"
-        android:hint="Enter URL"
-        android:inputType="text"
-        android:minHeight="48dp" />
+        android:gravity="center_vertical">
+
+        <EditText
+            android:id="@+id/editTextText2"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:ems="10"
+            android:hint="Enter URL"
+            android:inputType="text"
+            android:minHeight="48dp" />
 
-    <EditText
-        android:id="@+id/time"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:ems="10"
-        android:inputType="text"
-        android:drawableRight="@drawable/ic_baseline_access_time_24"
-        android:hint="Choose a time that orders close by this time period"
-        android:textSize="15sp"
-        android:layout_marginTop="8dp"
-        android:layout_marginStart="16dp"
-        android:layout_marginEnd="16dp"
-        android:minHeight="48dp"
-        android:padding="12dp"
-        android:onClick="showTimePickerDialog"/>
+        <ImageButton
+            android:id="@+id/clear_url_button"
+            android:layout_width="48dp"
+            android:layout_height="match_parent"
+            android:background="?android:attr/selectableItemBackground"
+            android:contentDescription="Clear URL"
+            android:src="@drawable/clear"
+            android:padding="10dp"
+            android:visibility="gone" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/time_row"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginTop="16dp"
+        android:layout_marginLeft="16dp"
+        android:layout_marginRight="16dp"
+        android:layout_marginBottom="0dp"
+        android:clickable="true"
+        android:focusable="true"
+        android:background="?android:attr/selectableItemBackground"
+        android:padding="8dp"
+        android:onClick="showTimePickerDialog">
+
+        <EditText
+            android:id="@+id/time"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:ems="10"
+            android:inputType="none"
+            android:drawableRight="@drawable/ic_baseline_access_time_24"
+            android:hint="Select the latest time orders should be open"
+            android:textSize="15sp"
+            android:padding="12dp"
+            android:focusable="false"
+            android:clickable="false"/>
+
+        <ImageButton
+            android:id="@+id/clear_time_button"
+            android:layout_width="48dp"
+            android:layout_height="match_parent"
+            android:background="?android:attr/selectableItemBackground"
+            android:contentDescription="Clear time"
+            android:src="@drawable/clear"
+            android:padding="10dp"
+            android:visibility="gone"
+            android:onClick="clearTime"/>
+
+    </LinearLayout>
 
     <ListView
         android:id="@+id/category_list"
@@ -146,7 +186,6 @@
             android:text="Supplied orders"
             android:layout_margin="16dp" />
 
-
         <Space
             android:layout_width="56dp"
             android:layout_height="wrap_content"
@@ -159,7 +198,6 @@
             android:minHeight="48dp"
             android:text="Consumer orders"
             android:layout_margin="16dp"/>
-
     </LinearLayout>
 
     <LinearLayout
@@ -186,7 +224,6 @@
             android:layout_height="wrap_content"
             android:text="Unlimited People"
             android:layout_margin="16dp"/>
-
     </LinearLayout>
 
     <LinearLayout
@@ -208,8 +245,7 @@
             app:thumbRadius="12dp"
             app:thumbStrokeWidth="2dp"
             app:trackHeight="4dp"
-            android:enabled="false"
-            />
+            android:enabled="false" />
 
         <EditText
             android:id="@+id/unlimit_value"
@@ -223,8 +259,7 @@
             android:gravity="center"
             android:layout_marginStart="8dp"
             android:background="?android:attr/editTextBackground"
-            android:enabled="false"
-            />
+            android:enabled="false" />
     </LinearLayout>
 
     <LinearLayout
@@ -255,5 +290,4 @@
             android:onClick="OrderFiltering"
             android:text="Ok" />
     </LinearLayout>
-
 </LinearLayout>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ b/.idea/vcs.xml	(date 1719571098738)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"SuppressKotlinCodeStyleNotification\">\r\n    <option name=\"disableForAll\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VisualizationToolProject\">\r\n    <option name=\"state\">\r\n      <ProjectState>\r\n        <option name=\"scale\" value=\"0.18\" />\r\n      </ProjectState>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ b/.idea/misc.xml	(date 1719571236593)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
@@ -6,14 +7,4 @@
   <component name="ProjectType">
     <option name="id" value="Android" />
   </component>
-  <component name="SuppressKotlinCodeStyleNotification">
-    <option name="disableForAll" value="true" />
-  </component>
-  <component name="VisualizationToolProject">
-    <option name="state">
-      <ProjectState>
-        <option name="scale" value="0.18" />
-      </ProjectState>
-    </option>
-  </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/elisham/coshop/FilterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.elisham.coshop;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.util.SparseBooleanArray;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.TimePicker;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.slider.RangeSlider;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.GeoPoint;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\npublic class FilterActivity extends AppCompatActivity {\r\n    private ActivityResultLauncher<Intent> locationWindowLauncher;\r\n    private TextView searchAddressText;\r\n    private ListView categoryListView;\r\n    private FirebaseFirestore db;\r\n    private ArrayAdapter<String> adapter;\r\n    private EditText timeEditText;\r\n    private Calendar selectedTime;\r\n\r\n    private RangeSlider rangeSlider;\r\n    private EditText unlimitEditText;\r\n\r\n    private CheckBox checkBoxLimit;\r\n    private CheckBox checkBoxUnlimited;\r\n\r\n    private String lastAddress;\r\n    private double lastLatitude;\r\n    private double lastLongitude;\r\n    private int lastDistance;\r\n\r\n    private ImageButton searchAddressButton;\r\n    private ImageButton editAddressButton;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_filter);\r\n\r\n        timeEditText = findViewById(R.id.time);\r\n        timeEditText.setOnClickListener(v -> showTimePickerDialog(v));\r\n\r\n        LinearLayout searchRow = findViewById(R.id.search_row);\r\n        searchRow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(FilterActivity.this, LocationWindow.class);\r\n                if (lastAddress != null && !lastAddress.isEmpty() && lastDistance > 0) {\r\n                    intent.putExtra(\"address\", lastAddress);\r\n                    intent.putExtra(\"distance\", lastDistance);\r\n                }\r\n                locationWindowLauncher.launch(intent);\r\n            }\r\n        });\r\n        locationWindowLauncher = registerForActivityResult(\r\n                new ActivityResultContracts.StartActivityForResult(),\r\n                result -> {\r\n                    if (result.getResultCode() == RESULT_OK && result.getData() != null) {\r\n                        lastAddress = result.getData().getStringExtra(\"address\");\r\n                        lastDistance = result.getData().getIntExtra(\"distance\", 0);\r\n                        lastLatitude = result.getData().getDoubleExtra(\"latitude\", 0);\r\n                        lastLongitude = result.getData().getDoubleExtra(\"longitude\", 0);\r\n\r\n                        if (lastAddress != null) {\r\n                            String displayText = String.format(Locale.getDefault(), \"%s, %d KM\", lastAddress, lastDistance);\r\n                            searchAddressText.setText(displayText);\r\n                            searchAddressButton.setVisibility(View.VISIBLE);\r\n                            searchAddressButton.setTag(\"clear\");\r\n                            searchAddressButton.setImageResource(R.drawable.clear);\r\n                            editAddressButton.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        ImageButton closeButton = findViewById(R.id.close_button);\r\n        closeButton.setOnClickListener(v -> finish());\r\n\r\n        searchAddressText = findViewById(R.id.search_address_text);\r\n        searchAddressButton = findViewById(R.id.search_address_button);\r\n        editAddressButton = findViewById(R.id.edit_address_button);\r\n\r\n        searchAddressButton.setOnClickListener(v -> {\r\n            if (searchAddressButton.getTag() != null && searchAddressButton.getTag().equals(\"clear\")) {\r\n                searchAddressText.setText(\"\");\r\n                searchAddressButton.setTag(\"search\");\r\n                searchAddressButton.setImageResource(R.drawable.baseline_search_24);\r\n                editAddressButton.setVisibility(View.GONE);\r\n\r\n                // איפוס הערכים האחרונים\r\n                lastAddress = null;\r\n                lastDistance = 0;\r\n                lastLatitude = 0;\r\n                lastLongitude = 0;\r\n            }\r\n        });\r\n\r\n        searchAddressText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                toggleSearchClearIcon();\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {}\r\n        });\r\n\r\n        db = FirebaseFirestore.getInstance();\r\n        categoryListView = findViewById(R.id.category_list);\r\n\r\n        rangeSlider = findViewById(R.id.rangeSliderPeople);\r\n        unlimitEditText = findViewById(R.id.unlimit_value);\r\n\r\n        checkBoxLimit = findViewById(R.id.checkBoxLimit);\r\n        checkBoxUnlimited = findViewById(R.id.checkBoxUnlimited);\r\n\r\n        checkBoxLimit.setOnCheckedChangeListener((buttonView, isChecked) -> {\r\n            if (isChecked) {\r\n                checkBoxUnlimited.setChecked(false);\r\n                rangeSlider.setEnabled(true);\r\n                unlimitEditText.setEnabled(true);\r\n            } else {\r\n                rangeSlider.setEnabled(false);\r\n                unlimitEditText.setEnabled(false);\r\n            }\r\n        });\r\n\r\n        checkBoxUnlimited.setOnCheckedChangeListener((buttonView, isChecked) -> {\r\n            if (isChecked) {\r\n                checkBoxLimit.setChecked(false);\r\n                rangeSlider.setEnabled(false);\r\n                unlimitEditText.setEnabled(false);\r\n            }\r\n        });\r\n\r\n        rangeSlider.setValueFrom(2);\r\n        rangeSlider.setValueTo(1000);\r\n\r\n        rangeSlider.setLabelFormatter(value -> String.valueOf((int) value));\r\n\r\n        rangeSlider.addOnChangeListener((slider, value, fromUser) -> {\r\n            if (fromUser) {\r\n                unlimitEditText.setText(String.valueOf((int) value));\r\n            }\r\n        });\r\n\r\n        readCategoriesFromFireStore();\r\n\r\n        locationWindowLauncher = registerForActivityResult(\r\n                new ActivityResultContracts.StartActivityForResult(),\r\n                result -> {\r\n                    if (result.getResultCode() == RESULT_OK && result.getData() != null) {\r\n                        lastAddress = result.getData().getStringExtra(\"address\");\r\n                        lastDistance = result.getData().getIntExtra(\"distance\", 0);\r\n                        lastLatitude = result.getData().getDoubleExtra(\"latitude\", 0);\r\n                        lastLongitude = result.getData().getDoubleExtra(\"longitude\", 0);\r\n\r\n                        if (lastAddress != null) {\r\n                            String displayText = String.format(Locale.getDefault(), \"%s, %d KM\", lastAddress, lastDistance);\r\n                            searchAddressText.setText(displayText);\r\n                            searchAddressButton.setVisibility(View.VISIBLE);\r\n                            searchAddressButton.setTag(\"clear\");\r\n                            searchAddressButton.setImageResource(R.drawable.clear);\r\n                            editAddressButton.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        editAddressButton.setOnClickListener(v -> {\r\n            Intent intent = new Intent(FilterActivity.this, LocationWindow.class);\r\n            if (lastAddress != null && !lastAddress.isEmpty() && lastDistance > 0) {\r\n                intent.putExtra(\"address\", lastAddress);\r\n                intent.putExtra(\"distance\", lastDistance);\r\n            }\r\n            locationWindowLauncher.launch(intent);\r\n        });\r\n    }\r\n\r\n    private void toggleSearchClearIcon() {\r\n        String address = searchAddressText.getText().toString();\r\n        if (!address.isEmpty() && lastDistance > 0) {\r\n            searchAddressButton.setTag(\"clear\");\r\n            searchAddressButton.setImageResource(R.drawable.clear);\r\n            editAddressButton.setVisibility(View.VISIBLE);\r\n        } else {\r\n            searchAddressButton.setTag(\"search\");\r\n            searchAddressButton.setImageResource(R.drawable.baseline_search_24);\r\n            editAddressButton.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    private void readCategoriesFromFireStore() {\r\n        db.collection(\"categories\").document(\"jQ4hXL6kr1AbKwPvEdXl\")\r\n                .get()\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        DocumentSnapshot document = task.getResult();\r\n                        if (document.exists()) {\r\n                            List<String> categoriesList = (List<String>) document.get(\"categories\");\r\n                            if (categoriesList != null && categoriesList.size() > 1) {\r\n                                List<String> subList = categoriesList.subList(1, categoriesList.size());\r\n                                adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_multiple_choice, subList);\r\n                                categoryListView.setAdapter(adapter);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Log.d(\"Firestore\", \"Error getting categories: \", task.getException());\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void OrderFiltering(View v) {\r\n        String address = searchAddressText.getText().toString();\r\n        List<String> selectedCategories = getSelectedCategories();\r\n\r\n        boolean filterByLocation = !address.isEmpty() || lastAddress != null;\r\n        boolean filterByCategory = selectedCategories != null && !selectedCategories.isEmpty();\r\n        boolean filterByConsumer = ((CheckBox) findViewById(R.id.checkBoxConsumer)).isChecked();\r\n        boolean filterBySupplied = ((CheckBox) findViewById(R.id.checkBoxSupplied)).isChecked();\r\n        boolean filterByPeopleLimit = checkBoxLimit.isChecked();\r\n        boolean filterByUnlimitedPeople = checkBoxUnlimited.isChecked();\r\n        int peopleLimit = 0;\r\n\r\n        if (filterByPeopleLimit) {\r\n            String peopleLimitStr = unlimitEditText.getText().toString().trim();\r\n            if (!peopleLimitStr.isEmpty()) {\r\n                peopleLimit = Integer.parseInt(peopleLimitStr);\r\n            } else {\r\n                filterByPeopleLimit = false;\r\n            }\r\n        }\r\n\r\n        if (!filterByLocation && !filterByCategory && !filterByConsumer && !filterBySupplied && !filterByPeopleLimit && !filterByUnlimitedPeople) {\r\n            Toast.makeText(this, \"Select minimum in one filter\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        if (filterByLocation) {\r\n            if (address.isEmpty()) {\r\n                address = lastAddress;\r\n            }\r\n\r\n            double userLat = lastLatitude;\r\n            double userLon = lastLongitude;\r\n\r\n            fetchOrders(userLat, userLon, lastDistance, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople);\r\n        } else {\r\n            fetchOrders(0, 0, 0, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople);\r\n        }\r\n    }\r\n\r\n    public void resetFilters(View v) {\r\n        // Reset address field\r\n        searchAddressText.setText(\"\"); // Reset the TextView to its initial state\r\n\r\n        // Reset CheckBoxes\r\n        CheckBox checkBoxSupplied = findViewById(R.id.checkBoxSupplied);\r\n        checkBoxSupplied.setChecked(false);\r\n\r\n        CheckBox checkBoxConsumer = findViewById(R.id.checkBoxConsumer);\r\n        checkBoxConsumer.setChecked(false);\r\n\r\n        CheckBox checkBoxLimit = findViewById(R.id.checkBoxLimit);\r\n        checkBoxLimit.setChecked(false);\r\n\r\n        CheckBox checkBoxUnlimited = findViewById(R.id.checkBoxUnlimited);\r\n        checkBoxUnlimited.setChecked(false);\r\n\r\n        // Reset RangeSlider and EditText for people limit\r\n        RangeSlider rangeSlider = findViewById(R.id.rangeSliderPeople);\r\n        rangeSlider.setValues(2f);\r\n\r\n        EditText unlimitEditText = findViewById(R.id.unlimit_value);\r\n        unlimitEditText.setText(\"1000\");\r\n        rangeSlider.setEnabled(false);\r\n        unlimitEditText.setEnabled(false);\r\n\r\n        // Reset category ListView\r\n        ListView categoryListView = findViewById(R.id.category_list);\r\n        for (int i = 0; i < categoryListView.getCount(); i++) {\r\n            categoryListView.setItemChecked(i, false);\r\n        }\r\n\r\n        // Reset the saved address and distance values\r\n        lastAddress = null;\r\n        lastLatitude = 0;\r\n        lastLongitude = 0;\r\n        lastDistance = 0;\r\n    }\r\n\r\n    private void fetchOrders(double userLat, double userLon, int distance, List<String> selectedCategories, boolean filterByCategory, boolean filterByConsumer, boolean filterBySupplied, boolean filterByPeopleLimit, int peopleLimit, boolean filterByUnlimitedPeople) {\r\n        CollectionReference ordersRef = db.collection(\"orders\");\r\n        ordersRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                StringBuilder results = new StringBuilder();\r\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\r\n                    boolean matchesCategory = true;\r\n                    if (filterByCategory) {\r\n                        String categorie = documentSnapshot.getString(\"categorie\");\r\n                        matchesCategory = selectedCategories.contains(categorie);\r\n                    }\r\n\r\n                    boolean matchesLocation = true;\r\n                    double distanceInKm = 0;\r\n                    if (distance > 0) {\r\n                        GeoPoint geoPoint = documentSnapshot.getGeoPoint(\"location\");\r\n                        if (geoPoint != null) {\r\n                            double orderLat = geoPoint.getLatitude();\r\n                            double orderLon = geoPoint.getLongitude();\r\n\r\n                            float[] resultsArray = new float[1];\r\n                            android.location.Location.distanceBetween(userLat, userLon, orderLat, orderLon, resultsArray);\r\n                            float distanceInMeters = resultsArray[0];\r\n                            distanceInKm = distanceInMeters / 1000;\r\n\r\n                            matchesLocation = distanceInKm <= distance;\r\n                        } else {\r\n                            matchesLocation = false;\r\n                        }\r\n                    }\r\n\r\n                    boolean matchesTypeOfOrder = true;\r\n                    if (filterByConsumer || filterBySupplied) {\r\n                        String typeOfOrder = documentSnapshot.getString(\"type_of_order\");\r\n\r\n                        matchesTypeOfOrder = (filterByConsumer && \"Consumer\".equals(typeOfOrder)) ||\r\n                                (filterBySupplied && \"Supplier\".equals(typeOfOrder));\r\n                    }\r\n\r\n                    boolean matchesPeopleLimit = true;\r\n                    if (filterByPeopleLimit || filterByUnlimitedPeople) {\r\n                        Long maxPeople = documentSnapshot.getLong(\"max_people\");\r\n                        if (filterByUnlimitedPeople) {\r\n                            matchesPeopleLimit = maxPeople != null && maxPeople == 0;\r\n                        } else if (filterByPeopleLimit) {\r\n                            matchesPeopleLimit = maxPeople != null && maxPeople >= 2 && maxPeople <= peopleLimit && maxPeople != 0;\r\n                        }\r\n                    }\r\n\r\n                    if (matchesCategory && matchesLocation && matchesTypeOfOrder && matchesPeopleLimit) {\r\n                        results.append(documentSnapshot.getId()).append(\";\")\r\n                                .append(documentSnapshot.getString(\"titleOfOrder\")).append(\";\")\r\n                                .append(documentSnapshot.getGeoPoint(\"location\").getLatitude()).append(\",\").append(documentSnapshot.getGeoPoint(\"location\").getLongitude()).append(\";\")\r\n                                .append(documentSnapshot.getLong(\"NumberOfPeopleInOrder\")).append(\";\")\r\n                                .append(documentSnapshot.getLong(\"max_people\")).append(\";\")\r\n                                .append(documentSnapshot.getString(\"categorie\")).append(\";\")\r\n                                .append(distanceInKm).append(\";\")\r\n                                .append(documentSnapshot.getTimestamp(\"time\").getSeconds()).append(\"\\n\");\r\n                    }\r\n                }\r\n\r\n                Intent intent = new Intent(FilterActivity.this, HomePageActivity.class);\r\n                if (results.length() == 0) {\r\n                    intent.putExtra(\"noOrdersFound\", true);\r\n                } else {\r\n                    intent.putExtra(\"filteredOrders\", results.toString());\r\n                    intent.putExtra(\"filterActive\", true);\r\n                }\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    private List<String> getSelectedCategories() {\r\n        SparseBooleanArray checkedItems = categoryListView.getCheckedItemPositions();\r\n        List<String> selectedCategories = new ArrayList<>();\r\n        for (int i = 0; i < checkedItems.size(); i++) {\r\n            int position = checkedItems.keyAt(i);\r\n            if (checkedItems.valueAt(i)) {\r\n                selectedCategories.add(adapter.getItem(position));\r\n            }\r\n        }\r\n        return selectedCategories;\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_items, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case android.R.id.home:\r\n                onBackPressed();\r\n                return true;\r\n            case R.id.Personal_info:\r\n                personalInfo();\r\n                return true;\r\n            case R.id.My_Orders:\r\n                myOrders();\r\n                return true;\r\n            case R.id.About_Us:\r\n                aboutUs();\r\n                return true;\r\n            case R.id.Contact_Us:\r\n                contactUs();\r\n                return true;\r\n            case R.id.Log_Out:\r\n                logOut();\r\n                return true;\r\n            case R.id.list_icon:\r\n                basket();\r\n                return true;\r\n            case R.id.home:\r\n                home();\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n    public void showTimePickerDialog(View view) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        DatePickerDialog datePickerDialog = new DatePickerDialog(FilterActivity.this, new DatePickerDialog.OnDateSetListener() {\r\n            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {\r\n                Calendar currentDate = Calendar.getInstance();\r\n                currentDate.set(Calendar.YEAR, year);\r\n                currentDate.set(Calendar.MONTH, month);\r\n                currentDate.set(Calendar.DAY_OF_MONTH, dayOfMonth);\r\n\r\n                if (currentDate.before(Calendar.getInstance())) {\r\n                    Toast.makeText(FilterActivity.this, \"You can't choose a past date\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    Calendar selectedDate = Calendar.getInstance();\r\n                    selectedDate.set(year, month, dayOfMonth);\r\n\r\n                    TimePickerDialog timePickerDialog = new TimePickerDialog(FilterActivity.this, new TimePickerDialog.OnTimeSetListener() {\r\n                        public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\r\n                            selectedDate.set(Calendar.HOUR_OF_DAY, hourOfDay);\r\n                            selectedDate.set(Calendar.MINUTE, minute);\r\n\r\n                            if (selectedDate.before(Calendar.getInstance())) {\r\n                                Toast.makeText(FilterActivity.this, \"You cannot select a past time\", Toast.LENGTH_SHORT).show();\r\n                            } else {\r\n                                selectedTime = selectedDate;\r\n                                SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\r\n                                String dateTime = sdf.format(selectedDate.getTime());\r\n\r\n                                timeEditText.setText(dateTime);\r\n                            }\r\n                        }\r\n                    }, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), true);\r\n                    timePickerDialog.show();\r\n                }\r\n            }\r\n        }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));\r\n        datePickerDialog.show();\r\n    }\r\n\r\n    public void home() {\r\n        Intent toy = new Intent(FilterActivity.this, HomePageActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void personalInfo() {\r\n        Intent toy = new Intent(FilterActivity.this, UserDetailsActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void myOrders() {\r\n        Intent toy = new Intent(FilterActivity.this, MyOrdersActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void aboutUs() {\r\n        Intent toy = new Intent(FilterActivity.this, AboutActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void contactUs() {\r\n        Intent toy = new Intent(FilterActivity.this, ContactUsActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void basket() {\r\n        Intent toy = new Intent(FilterActivity.this, BasketActivity.class);\r\n        startActivity(toy);\r\n    }\r\n\r\n    public void logOut() {\r\n        Intent toy = new Intent(FilterActivity.this, MainActivity.class);\r\n        startActivity(toy);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/elisham/coshop/FilterActivity.java b/app/src/main/java/com/elisham/coshop/FilterActivity.java
--- a/app/src/main/java/com/elisham/coshop/FilterActivity.java	(revision 63769bab9c1366a5c6b8e061573228d4737b3aa2)
+++ b/app/src/main/java/com/elisham/coshop/FilterActivity.java	(date 1719508358000)
@@ -12,6 +12,7 @@
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.Log;
+import android.util.Patterns;
 import android.util.SparseBooleanArray;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -40,6 +41,8 @@
 import java.util.Calendar;
 import java.util.List;
 import java.util.Locale;
+import java.util.regex.Pattern;
+
 public class FilterActivity extends AppCompatActivity {
     private ActivityResultLauncher<Intent> locationWindowLauncher;
     private TextView searchAddressText;
@@ -48,20 +51,19 @@
     private ArrayAdapter<String> adapter;
     private EditText timeEditText;
     private Calendar selectedTime;
-
     private RangeSlider rangeSlider;
     private EditText unlimitEditText;
-
     private CheckBox checkBoxLimit;
     private CheckBox checkBoxUnlimited;
-
     private String lastAddress;
     private double lastLatitude;
     private double lastLongitude;
     private int lastDistance;
-
     private ImageButton searchAddressButton;
     private ImageButton editAddressButton;
+    private EditText editTextURL;
+    private ImageButton clearURLButton;
+    private String lastURL;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -69,20 +71,45 @@
         setContentView(R.layout.activity_filter);
 
         timeEditText = findViewById(R.id.time);
-        timeEditText.setOnClickListener(v -> showTimePickerDialog(v));
+        timeEditText.setOnClickListener(this::showTimePickerDialog);
+        ImageButton clearTimeButton = findViewById(R.id.clear_time_button);
+
+        LinearLayout timeRow = findViewById(R.id.time_row);
+        timeRow.setOnClickListener(this::showTimePickerDialog);
+
+        clearTimeButton.setOnClickListener(v -> {
+            timeEditText.setText("");
+            clearTimeButton.setVisibility(View.GONE);
+        });
+
+        editTextURL = findViewById(R.id.editTextText2);
+        clearURLButton = findViewById(R.id.clear_url_button);
+        clearURLButton.setOnClickListener(v -> editTextURL.setText(""));
+
+        editTextURL.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                clearURLButton.setVisibility(s.length() > 0 ? View.VISIBLE : View.GONE);
+                lastURL = s.toString();
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {}
+        });
 
         LinearLayout searchRow = findViewById(R.id.search_row);
-        searchRow.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(FilterActivity.this, LocationWindow.class);
-                if (lastAddress != null && !lastAddress.isEmpty() && lastDistance > 0) {
-                    intent.putExtra("address", lastAddress);
-                    intent.putExtra("distance", lastDistance);
-                }
-                locationWindowLauncher.launch(intent);
-            }
+        searchRow.setOnClickListener(v -> {
+            Intent intent = new Intent(FilterActivity.this, LocationWindow.class);
+            if (lastAddress != null && !lastAddress.isEmpty() && lastDistance > 0) {
+                intent.putExtra("address", lastAddress);
+                intent.putExtra("distance", lastDistance);
+            }
+            locationWindowLauncher.launch(intent);
         });
+
         locationWindowLauncher = registerForActivityResult(
                 new ActivityResultContracts.StartActivityForResult(),
                 result -> {
@@ -246,14 +273,17 @@
 
     public void OrderFiltering(View v) {
         String address = searchAddressText.getText().toString();
+        String urlOrString = editTextURL.getText().toString();
         List<String> selectedCategories = getSelectedCategories();
 
         boolean filterByLocation = !address.isEmpty() || lastAddress != null;
+        boolean filterByURLOrString = !urlOrString.isEmpty();
         boolean filterByCategory = selectedCategories != null && !selectedCategories.isEmpty();
         boolean filterByConsumer = ((CheckBox) findViewById(R.id.checkBoxConsumer)).isChecked();
         boolean filterBySupplied = ((CheckBox) findViewById(R.id.checkBoxSupplied)).isChecked();
         boolean filterByPeopleLimit = checkBoxLimit.isChecked();
         boolean filterByUnlimitedPeople = checkBoxUnlimited.isChecked();
+        boolean filterByTime = selectedTime != null;
         int peopleLimit = 0;
 
         if (filterByPeopleLimit) {
@@ -265,22 +295,32 @@
             }
         }
 
-        if (!filterByLocation && !filterByCategory && !filterByConsumer && !filterBySupplied && !filterByPeopleLimit && !filterByUnlimitedPeople) {
+        if (!filterByLocation && !filterByURLOrString && !filterByCategory && !filterByConsumer && !filterBySupplied && !filterByPeopleLimit && !filterByUnlimitedPeople && !filterByTime) {
             Toast.makeText(this, "Select minimum in one filter", Toast.LENGTH_SHORT).show();
             return;
         }
 
-        if (filterByLocation) {
-            if (address.isEmpty()) {
-                address = lastAddress;
-            }
+        if (filterByURLOrString) {
+            if (isValidURL(urlOrString)) {
+                fetchOrdersByUrl(urlOrString, address, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople, filterByTime, selectedTime);
+            } else if (isValidString(urlOrString)) {
+                fetchOrdersByString(urlOrString, address, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople, filterByTime, selectedTime);
+            } else {
+                Toast.makeText(this, "Invalid URL or String", Toast.LENGTH_SHORT).show();
+            }
+        } else {
+            if (filterByLocation) {
+                if (address.isEmpty()) {
+                    address = lastAddress;
+                }
 
-            double userLat = lastLatitude;
-            double userLon = lastLongitude;
+                double userLat = lastLatitude;
+                double userLon = lastLongitude;
 
-            fetchOrders(userLat, userLon, lastDistance, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople);
-        } else {
-            fetchOrders(0, 0, 0, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople);
+                fetchOrders(userLat, userLon, lastDistance, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople, filterByTime, selectedTime);
+            } else {
+                fetchOrders(0, 0, 0, selectedCategories, filterByCategory, filterByConsumer, filterBySupplied, filterByPeopleLimit, peopleLimit, filterByUnlimitedPeople, filterByTime, selectedTime);
+            }
         }
     }
 
@@ -288,6 +328,9 @@
         // Reset address field
         searchAddressText.setText(""); // Reset the TextView to its initial state
 
+        // Reset URL field
+        editTextURL.setText(""); // Reset the EditText to its initial state
+
         // Reset CheckBoxes
         CheckBox checkBoxSupplied = findViewById(R.id.checkBoxSupplied);
         checkBoxSupplied.setChecked(false);
@@ -321,13 +364,36 @@
         lastLatitude = 0;
         lastLongitude = 0;
         lastDistance = 0;
+
+        // Reset the time and date
+        timeEditText.setText("");
+        findViewById(R.id.clear_time_button).setVisibility(View.GONE);
+    }
+
+    private boolean isValidURL(String url) {
+        Pattern pattern = Patterns.WEB_URL;
+        return pattern.matcher(url).matches();
+    }
+
+    private boolean isValidString(String str) {
+        return str.matches("[a-zA-Z ]+");
+    }
+    private String getDomainName(String url) {
+        try {
+            java.net.URL netUrl = new java.net.URL(url);
+            return netUrl.getHost();
+        } catch (Exception e) {
+            return null;
+        }
     }
 
-    private void fetchOrders(double userLat, double userLon, int distance, List<String> selectedCategories, boolean filterByCategory, boolean filterByConsumer, boolean filterBySupplied, boolean filterByPeopleLimit, int peopleLimit, boolean filterByUnlimitedPeople) {
+
+    private void fetchOrders(double userLat, double userLon, int distance, List<String> selectedCategories, boolean filterByCategory, boolean filterByConsumer, boolean filterBySupplied, boolean filterByPeopleLimit, int peopleLimit, boolean filterByUnlimitedPeople, boolean filterByTime, Calendar selectedTime) {
         CollectionReference ordersRef = db.collection("orders");
         ordersRef.get().addOnCompleteListener(task -> {
             if (task.isSuccessful()) {
                 StringBuilder results = new StringBuilder();
+                long currentTimeMillis = System.currentTimeMillis(); // זמן נוכחי במילישניות
                 for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
                     boolean matchesCategory = true;
                     if (filterByCategory) {
@@ -372,7 +438,16 @@
                         }
                     }
 
-                    if (matchesCategory && matchesLocation && matchesTypeOfOrder && matchesPeopleLimit) {
+                    boolean matchesTime = true;
+                    if (filterByTime) {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis <= selectedTime.getTimeInMillis() && orderTimeInMillis > currentTimeMillis;
+                    } else {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis > currentTimeMillis; // בדיקה האם הזמן עבר
+                    }
+
+                    if (matchesCategory && matchesLocation && matchesTypeOfOrder && matchesPeopleLimit && matchesTime) {
                         results.append(documentSnapshot.getId()).append(";")
                                 .append(documentSnapshot.getString("titleOfOrder")).append(";")
                                 .append(documentSnapshot.getGeoPoint("location").getLatitude()).append(",").append(documentSnapshot.getGeoPoint("location").getLongitude()).append(";")
@@ -396,6 +471,178 @@
         });
     }
 
+    private void fetchOrdersByUrl(String url, String address, List<String> selectedCategories, boolean filterByCategory, boolean filterByConsumer, boolean filterBySupplied, boolean filterByPeopleLimit, int peopleLimit, boolean filterByUnlimitedPeople, boolean filterByTime, Calendar selectedTime) {
+        String domainName = getDomainName(url);
+        if (domainName == null) {
+            Toast.makeText(this, "Invalid URL", Toast.LENGTH_SHORT).show();
+            return;
+        }
+
+        CollectionReference ordersRef = db.collection("orders");
+        ordersRef.whereEqualTo("URL", domainName).get().addOnCompleteListener(task -> {
+            if (task.isSuccessful()) {
+                StringBuilder results = new StringBuilder();
+                long currentTimeMillis = System.currentTimeMillis(); // זמן נוכחי במילישניות
+                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
+                    boolean matchesCategory = true;
+                    if (filterByCategory) {
+                        String categorie = documentSnapshot.getString("categorie");
+                        matchesCategory = selectedCategories.contains(categorie);
+                    }
+
+                    boolean matchesLocation = true;
+                    double distanceInKm = 0;
+                    if (!address.isEmpty()) {
+                        GeoPoint geoPoint = documentSnapshot.getGeoPoint("location");
+                        if (geoPoint != null) {
+                            double orderLat = geoPoint.getLatitude();
+                            double orderLon = geoPoint.getLongitude();
+
+                            float[] resultsArray = new float[1];
+                            android.location.Location.distanceBetween(lastLatitude, lastLongitude, orderLat, orderLon, resultsArray);
+                            float distanceInMeters = resultsArray[0];
+                            distanceInKm = distanceInMeters / 1000;
+
+                            matchesLocation = distanceInKm <= lastDistance;
+                        } else {
+                            matchesLocation = false;
+                        }
+                    }
+
+                    boolean matchesTypeOfOrder = true;
+                    if (filterByConsumer || filterBySupplied) {
+                        String typeOfOrder = documentSnapshot.getString("type_of_order");
+
+                        matchesTypeOfOrder = (filterByConsumer && "Consumer".equals(typeOfOrder)) ||
+                                (filterBySupplied && "Supplier".equals(typeOfOrder));
+                    }
+
+                    boolean matchesPeopleLimit = true;
+                    if (filterByPeopleLimit || filterByUnlimitedPeople) {
+                        Long maxPeople = documentSnapshot.getLong("max_people");
+                        if (filterByUnlimitedPeople) {
+                            matchesPeopleLimit = maxPeople != null && maxPeople == 0;
+                        } else if (filterByPeopleLimit) {
+                            matchesPeopleLimit = maxPeople != null && maxPeople >= 2 && maxPeople <= peopleLimit && maxPeople != 0;
+                        }
+                    }
+
+                    boolean matchesTime = true;
+                    if (filterByTime) {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis <= selectedTime.getTimeInMillis() && orderTimeInMillis > currentTimeMillis;
+                    } else {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis > currentTimeMillis; // בדיקה האם הזמן עבר
+                    }
+
+                    if (matchesCategory && matchesLocation && matchesTypeOfOrder && matchesPeopleLimit && matchesTime) {
+                        results.append(documentSnapshot.getId()).append(";")
+                                .append(documentSnapshot.getString("titleOfOrder")).append(";")
+                                .append(documentSnapshot.getGeoPoint("location").getLatitude()).append(",").append(documentSnapshot.getGeoPoint("location").getLongitude()).append(";")
+                                .append(documentSnapshot.getLong("NumberOfPeopleInOrder")).append(";")
+                                .append(documentSnapshot.getLong("max_people")).append(";")
+                                .append(documentSnapshot.getString("categorie")).append(";")
+                                .append(distanceInKm).append(";")
+                                .append(documentSnapshot.getTimestamp("time").getSeconds()).append("\n");
+                    }
+                }
+
+                Intent intent = new Intent(FilterActivity.this, HomePageActivity.class);
+                if (results.length() == 0) {
+                    intent.putExtra("noOrdersFound", true);
+                } else {
+                    intent.putExtra("filteredOrders", results.toString());
+                    intent.putExtra("filterActive", true);
+                }
+                startActivity(intent);
+            }
+        });
+    }
+    private void fetchOrdersByString(String str, String address, List<String> selectedCategories, boolean filterByCategory, boolean filterByConsumer, boolean filterBySupplied, boolean filterByPeopleLimit, int peopleLimit, boolean filterByUnlimitedPeople, boolean filterByTime, Calendar selectedTime) {
+        CollectionReference ordersRef = db.collection("orders");
+        ordersRef.whereEqualTo("URL", str).get().addOnCompleteListener(task -> {
+            if (task.isSuccessful()) {
+                StringBuilder results = new StringBuilder();
+                long currentTimeMillis = System.currentTimeMillis(); // זמן נוכחי במילישניות
+                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
+                    boolean matchesCategory = true;
+                    if (filterByCategory) {
+                        String categorie = documentSnapshot.getString("categorie");
+                        matchesCategory = selectedCategories.contains(categorie);
+                    }
+
+                    boolean matchesLocation = true;
+                    double distanceInKm = 0;
+                    if (!address.isEmpty()) {
+                        GeoPoint geoPoint = documentSnapshot.getGeoPoint("location");
+                        if (geoPoint != null) {
+                            double orderLat = geoPoint.getLatitude();
+                            double orderLon = geoPoint.getLongitude();
+
+                            float[] resultsArray = new float[1];
+                            android.location.Location.distanceBetween(lastLatitude, lastLongitude, orderLat, orderLon, resultsArray);
+                            float distanceInMeters = resultsArray[0];
+                            distanceInKm = distanceInMeters / 1000;
+
+                            matchesLocation = distanceInKm <= lastDistance;
+                        } else {
+                            matchesLocation = false;
+                        }
+                    }
+
+                    boolean matchesTypeOfOrder = true;
+                    if (filterByConsumer || filterBySupplied) {
+                        String typeOfOrder = documentSnapshot.getString("type_of_order");
+
+                        matchesTypeOfOrder = (filterByConsumer && "Consumer".equals(typeOfOrder)) ||
+                                (filterBySupplied && "Supplier".equals(typeOfOrder));
+                    }
+
+                    boolean matchesPeopleLimit = true;
+                    if (filterByPeopleLimit || filterByUnlimitedPeople) {
+                        Long maxPeople = documentSnapshot.getLong("max_people");
+                        if (filterByUnlimitedPeople) {
+                            matchesPeopleLimit = maxPeople != null && maxPeople == 0;
+                        } else if (filterByPeopleLimit) {
+                            matchesPeopleLimit = maxPeople != null && maxPeople >= 2 && maxPeople <= peopleLimit && maxPeople != 0;
+                        }
+                    }
+
+                    boolean matchesTime = true;
+                    if (filterByTime) {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis <= selectedTime.getTimeInMillis() && orderTimeInMillis > currentTimeMillis;
+                    } else {
+                        long orderTimeInMillis = documentSnapshot.getTimestamp("time").toDate().getTime();
+                        matchesTime = orderTimeInMillis > currentTimeMillis; // בדיקה האם הזמן עבר
+                    }
+
+                    if (matchesCategory && matchesLocation && matchesTypeOfOrder && matchesPeopleLimit && matchesTime) {
+                        results.append(documentSnapshot.getId()).append(";")
+                                .append(documentSnapshot.getString("titleOfOrder")).append(";")
+                                .append(documentSnapshot.getGeoPoint("location").getLatitude()).append(",").append(documentSnapshot.getGeoPoint("location").getLongitude()).append(";")
+                                .append(documentSnapshot.getLong("NumberOfPeopleInOrder")).append(";")
+                                .append(documentSnapshot.getLong("max_people")).append(";")
+                                .append(documentSnapshot.getString("categorie")).append(";")
+                                .append(distanceInKm).append(";")
+                                .append(documentSnapshot.getTimestamp("time").getSeconds()).append("\n");
+                    }
+                }
+
+                Intent intent = new Intent(FilterActivity.this, HomePageActivity.class);
+                if (results.length() == 0) {
+                    intent.putExtra("noOrdersFound", true);
+                } else {
+                    intent.putExtra("filteredOrders", results.toString());
+                    intent.putExtra("filterActive", true);
+                }
+                startActivity(intent);
+            }
+        });
+    }
+
+
     private List<String> getSelectedCategories() {
         SparseBooleanArray checkedItems = categoryListView.getCheckedItemPositions();
         List<String> selectedCategories = new ArrayList<>();
@@ -445,7 +692,9 @@
                 return super.onOptionsItemSelected(item);
         }
     }
+
     public void showTimePickerDialog(View view) {
+        Locale.setDefault(Locale.ENGLISH); // הגדרת השפה לאנגלית
         Calendar calendar = Calendar.getInstance();
         DatePickerDialog datePickerDialog = new DatePickerDialog(FilterActivity.this, new DatePickerDialog.OnDateSetListener() {
             public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
@@ -473,6 +722,7 @@
                                 String dateTime = sdf.format(selectedDate.getTime());
 
                                 timeEditText.setText(dateTime);
+                                findViewById(R.id.clear_time_button).setVisibility(View.VISIBLE);
                             }
                         }
                     }, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), true);
